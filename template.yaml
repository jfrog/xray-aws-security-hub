AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: SAM Template for xray-aws-security-hub

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 15

Parameters:
  DeploymentEnvironment:
    Default: DEV
    Description: Deployment environment for the app (e.g. DEV, STAGING, PROD)
    Type: String

  ApiAuthToken:
    Description: Authentication token for API endpoint. This will be stored in Secrets Manager. No requirements are applied to this token but we encourage you to apply good security practices. Leave blank to not use any authentication.
    NoEcho: True
    Type: String

  NotificationEmail:
    Default: jane.doe@example.com
    Description: Email address to notify of operational issues.
    Type: String

Metadata:
  AWS::ServerlessRepo::Application:
    Name: jfrog-xray-security-hub-integration
    Description: This serverless application integrates JFrog Xray with AWS Security Hub and sends Xray violations (security, licence compliance, operational risk) to Security Hub.
    Author: JFrog
    SpdxLicenseId: Apache-2.0
    LicenseUrl: LICENSE.txt
    ReadmeUrl: SERVERLESS-REPO-README.md
    Labels: ['jfrog', 'xray', 'devops', 'security', 'license', 'operational_risk', 'serverless', 'securityhub']
    HomePageUrl: https://github.com/jfrog/xray-aws-security-hub
    SemanticVersion: 0.1.0
    SourceCodeUrl: https://github.com/jfrog/xray-aws-security-hub

Conditions:
  IsDebugEnv: !Equals [!Ref 'DeploymentEnvironment', 'DEV']
  HasAuthToken: !Not [!Equals [!Ref 'ApiAuthToken', '']]
  HasNotificationEmail: !Not [!Equals [!Ref 'NotificationEmail', '']]

Resources:
  SecurityHubAuthTokenSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Description: Xray Security Hub API Gateway auth token
      Name: XraySecurityHubAuthToken
      SecretString: !Ref ApiAuthToken
      Tags:
        - Key: App
          Value: xray-aws-security-hub
        - Key: Environment
          Value: !Ref DeploymentEnvironment

  ApiGatewayLoggingRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - apigateway.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - !Sub arn:${AWS::Partition}:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs
      Tags:
        - Key: App
          Value: xray-aws-security-hub
        - Key: Environment
          Value: !Ref DeploymentEnvironment

  SecurityHubApi:
    Type: AWS::Serverless::Api
    Properties:
      Auth:
        ApiKeyRequired: False
        Authorizers:
          TokenAuthorizer:
            FunctionArn: !GetAtt AuthorizerFunction.Arn
            FunctionPayloadType: TOKEN
            Identity:
              Header: Authorization
        DefaultAuthorizer: TokenAuthorizer
      MethodSettings:
        - DataTraceEnabled: !If [IsDebugEnv, True, False]
          LoggingLevel: !If [IsDebugEnv, 'ERROR', 'INFO']
          ResourcePath: '/*' # allows for logging on any resource
          HttpMethod: '*' # allows for logging on any method
      Name: security-hub-api-dev
      StageName: !Ref DeploymentEnvironment
      TracingEnabled: !If [IsDebugEnv, True, False]

  AuthorizerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Description: Security Hub Xray integration Lambda execution role
      Path: /
      Policies:
        - PolicyName: logs
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*
        - PolicyName: secretsmanager
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                  - secretsmanager:DescribeSecret
                  - secretsmanager:ListSecretVersionIds
                Resource: !Ref SecurityHubAuthTokenSecret
              - Effect: Allow
                Action:
                  - secretsmanager:ListSecrets
                Resource: '*'
      Tags:
        - Key: App
          Value: xray-aws-security-hub
        - Key: Environment
          Value: !Ref DeploymentEnvironment

  EventProcessorRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Description: Security Hub Xray integration Lambda execution role
      Path: /
      Policies:
        - PolicyName: logs
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*
        - PolicyName: lambda
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                  - lambda:InvokeAsync
                Resource: '*'
      Tags:
        - Key: App
          Value: xray-aws-security-hub
        - Key: Environment
          Value: !Ref DeploymentEnvironment

  IssueProcessorRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Description: Security Hub Xray integration Lambda execution role
      Path: /
      Policies:
        - PolicyName: logs
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*
        - PolicyName: sqs
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - sqs:ReceiveMessage
                  - sqs:SendMessage
                  - sqs:DeleteMessage
                  - sqs:GetQueueAttributes
                Resource: !GetAtt XraySourceQueue.Arn
      Tags:
        - Key: App
          Value: xray-aws-security-hub
        - Key: Environment
          Value: !Ref DeploymentEnvironment

  TransformerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Description: Security Hub Xray integration Lambda execution role
      Path: /
      Policies:
        - PolicyName: logs
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*
        - PolicyName: sqs
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - sqs:ReceiveMessage
                  - sqs:SendMessage
                  - sqs:DeleteMessage
                  - sqs:GetQueueAttributes
                Resource: !GetAtt XraySourceQueue.Arn
        - PolicyName: securityHub
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - securityhub:Get*
                  - securityhub:List*
                  - securityhub:Describe*
                  - securityhub:BatchImportFindings
                  - securityhub:BatchUpdateFindings
                Resource: arn:aws:securityhub:*
      Tags:
        - Key: App
          Value: xray-aws-security-hub
        - Key: Environment
          Value: !Ref DeploymentEnvironment

  AuthorizerFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: authorizer/
      Environment:
        Variables:
          SECRET_ID: XraySecurityHubAuthToken
          HAS_AUTH_TOKEN: !If [HasAuthToken, 'true', 'false']
      FunctionName: authorizer
      Handler: app.handler
      Runtime: nodejs16.x
      Role: !GetAtt AuthorizerRole.Arn # access to secrets
      Tags:
        App: xray-aws-security-hub
        Environment: !Ref DeploymentEnvironment

  EventProcessorFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      Description: "Processes Xray payload as an event, splits the list of issues on chunks of 10 issues and invokes IssueProcessor Lambda."
      FunctionName: EventProcessor
      CodeUri: eventProcessor/
      Handler: app.lambdaHandler
      Runtime: nodejs16.x
      Role: !GetAtt EventProcessorRole.Arn # access to lambda, logs
      Events: # Initiated by API call form API gateway
        ProcessCallPayload:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /send
            Method: post
            RestApiId:
              Ref: SecurityHubApi
      Tags:
        App: xray-aws-security-hub
        Environment: !Ref DeploymentEnvironment

  IssueProcessorFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      Description: "Processes chunks of 10 issues and batch send messages to SQS queue."
      FunctionName: IssueProcessor
      CodeUri: issueProcessor/
      Handler: app.lambdaHandler
      Runtime: nodejs16.x
      Role: !GetAtt IssueProcessorRole.Arn # access to SQS, logs
      Environment:
        Variables:
          SQS_QUEUE_URL: !Ref XraySourceQueue
      Tags:
        App: xray-aws-security-hub
        Environment: !Ref DeploymentEnvironment

  TransformerFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      FunctionName: Transformer
      CodeUri: transformer/
      Handler: app.lambdaHandler
      Runtime: nodejs16.x
      Role: !GetAtt TransformerRole.Arn # access to SQS, sec hub, logs
      Environment:
        Variables:
          USE_DEV_ACCOUNT_ID: 'false'
          DEV_ACCOUNT_ID: ''
      Events: # Initiated by the message in SQS queue
        TransformCallPayload:
          Type: SQS # More info https://github.com/aws/serverless-application-model/blob/master/versions/2016-10-31.md#sqs
          Properties:
            Queue: !GetAtt XraySourceQueue.Arn
            BatchSize: 10
            Enabled: True
      Tags:
        App: xray-aws-security-hub
        Environment: !Ref DeploymentEnvironment

  XraySourceQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: XraySourceQueue.fifo
      FifoQueue: True
      ContentBasedDeduplication: False
      VisibilityTimeout: 120 # should be at least 6x of lambda timeout
      ReceiveMessageWaitTimeSeconds: 1 # added for testing
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt XrayDeadLetterQueue.Arn
        maxReceiveCount: 5
      Tags:
        - Key: App
          Value: xray-aws-security-hub
        - Key: Environment
          Value: !Ref DeploymentEnvironment

  XrayDeadLetterQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: DeadLetterQueue.fifo
      FifoQueue: True
      ContentBasedDeduplication: False
      Tags:
        - Key: App
          Value: xray-aws-security-hub
        - Key: Environment
          Value: !Ref DeploymentEnvironment

  AlarmTopic:
    Type: AWS::SNS::Topic
    Condition: HasNotificationEmail
    Properties:
      Subscription:
        - Endpoint:
            Ref: NotificationEmail
          Protocol: email
      Tags:
        - Key: App
          Value: xray-aws-security-hub
        - Key: Environment
          Value: !Ref DeploymentEnvironment

  QueueDepthAlarm:
    Type: AWS::CloudWatch::Alarm
    Condition: HasNotificationEmail
    Properties:
      AlarmDescription: Alarm if queue depth increases to more than 10 messages.
      Namespace: AWS/SQS
      MetricName: ApproximateNumberOfMessagesVisible
      Dimensions:
        - Name: QueueName
          Value: !GetAtt XraySourceQueue.QueueName
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 1
      Threshold: 10
      ComparisonOperator: GreaterThanThreshold
      AlarmActions:
        - Ref: AlarmTopic
      InsufficientDataActions:
        - Ref: AlarmTopic

Outputs:
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api

  ApiEndpoint:
    Description: "API Gateway endpoint URL"
    Value: !Sub "https://${SecurityHubApi}.execute-api.${AWS::Region}.${AWS::URLSuffix}/${DeploymentEnvironment}/send/"
